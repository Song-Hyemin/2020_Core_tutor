# -*- coding: utf-8 -*-
"""Core_튜터링_4주차.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18uis4XdEi6W1lawOkYxU4twOvzpLnDiV
"""

# 1. 게임판을 만들어 보자

# 가장 기본적인 방법 - 정의할 때 일일이 하나씩 할당해 주는 방법
lists = [[0,0,0,0,0],
         [0,0,0,0,0],
         [0,0,1,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]]

print(lists)

# 이중 리스트를 이중 리스트 답게 출력하는 함수를 만들어 보자
def print_doublelist(lists):
  print("이중 리스트를 출력합니다.")
  for i in range(0, 5, 1): # 가로(행)
    for  j in range(0,5,1):  # 세로(열)
      print(lists[i][j], end=" ")
    print()
  print("이중 리스트의 출력이 끝났습니다.")
  print()

print_doublelist(lists)

# 이중  For문과 append를 이용하는 방법
lists=[]
for i in range(0, 5, 1): # 가로(행)
  a = []
  for  j in range(0,5,1):  # 세로(열)
    a.append(0)
  lists.append(a)

print_doublelist(lists)

lists[2][2] = 1   # 리스트 (0,1,2,3,4) x (0,1,2,3,4)에서 (2,2)위치의 원래 값 0을 1로 바꾼다는 의미
print_doublelist(lists)

lists[4][4] = 3   # 리스트 (0,1,2,3,4) x (0,1,2,3,4)에서 (4,4)위치의 원래 값 0을 3으로 바꾼다는 의미
print_doublelist(lists)

lists[2][2] = 0
lists[4][4] = 0
print_doublelist(lists)

# 이중 리스트를 초기화하는 함수 만들기
# 리스트를 초기화하면
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 1 0 0 
# 0 0 0 0 0
# 0 0 0 0 0

def default_doublelist(lists):
  lists = []
  for i in range(0,5,1):
    a = []
    for j in range(0,5,1):
      a.append(0)
    lists.append(a)

  lists[2][2] = 1

  print_doublelist(lists)

  return lists

lists = default_doublelist(lists)

print_doublelist(lists)   # 함수의 밖에 있으므로 함수의 내용이 적용되지 않는다. (으뜸파이썬 p.217 참고)

# 2. 움직이는 것을 구현하기
# 내가 지금 있는 위치를 표시 (y,x)로 두기
x = 2
y = 2

#lists 초기화시키기
lists = default_doublelist(lists)

방향 = input("방향을 입력하세요: ")

lists[y][x] = 0  # 이동하기 전 위치의 좌표는 0으로 만든다.

# 왼쪽으로 1칸 간다면?  - (2,2)에서 (2,1)로 이동
if 방향 == "왼쪽" :
  x = x - 1

# 오른쪽으로 1칸 간다면?  - (2,2)에서 (2,3)로 이동
elif 방향 == "오른쪽":
  x = x  1

# 위로 1칸 간다면?  - (2,2)에서 (1,2)로 이동
elif 방향 == "위쪽":
  y = y - 1

# 아래로 1칸 간다면?  - (2,2)에서 (3,2)로 이동
elif 방향 == "아래쪽":
  y = y + 1

print(y,x)

lists[y][x] =1  # lists를 업데이트하는 부분 (이동한 후의 좌표는 1로 만든다.)

print_doublelist(lists)

# 여러 동작 수행하기 - 반복문 (while 문 등 ...)
x = 2
y = 2

while True:
  
  
  방향 = input("방향을 입력하세요. (그만하고 싶으면 \"그만\"이라고 작성하세요.) ")

  lists[y][x] = 0

  # 왼쪽으로 1칸 간다면?  - (2,2)에서 (2,1)로 이동
  if 방향 == "왼쪽" :
    x = x - 1

  # 오른쪽으로 1칸 간다면?  - (2,2)에서 (2,3)로 이동
  elif 방향 == "오른쪽":
    x = x + 1

  # 위로 1칸 간다면?  - (2,2)에서 (1,2)로 이동
  elif 방향 == "위쪽":
    y = y - 1

  # 아래로 1칸 간다면?  - (2,2)에서 (3,2)로 이동
  elif 방향 == "아래쪽":
    y = y + 1

  elif 방향 == "그만":
    break
  
  print(y,x)

  lists[y][x] = 1

  print_doublelist(lists)

# 테두리에 닿았다면?
x = 2
y = 2

while True:
  
  
  방향 = input("방향을 입력하세요. (그만하고 싶으면 \"그만\"이라고 작성하세요.) ")

  lists[y][x] = 0

  # 왼쪽으로 1칸 간다면?  - (2,2)에서 (2,1)로 이동
  if 방향 == "왼쪽" :
    x = x - 1
    # 테두리에 닿았다면?
    if x < 0:
      x = 0
      print('더 이상 왼쪽으로 갈 수 없습니다!')

  # 오른쪽으로 1칸 간다면?  - (2,2)에서 (2,3)로 이동
  elif 방향 == "오른쪽":
    x = x + 1
    # 테두리에 닿았다면?
    if x >= 5:
      x = 4
      print('더 이상 오른쪽으로 갈 수 없습니다!')

  # 위로 1칸 간다면?  - (2,2)에서 (1,2)로 이동
  elif 방향 == "위쪽":
    y = y - 1
    # 테두리에 닿았다면?
    if y < 0:
      y = 0
      print('더 이상 위쪽으로 갈 수 없습니다!')

  # 아래로 1칸 간다면?  - (2,2)에서 (3,2)로 이동
  elif 방향 == "아래쪽":
    y = y + 1
    # 테두리에 닿았다면?
    if y >= 5:
      y = 4
      print('더 이상 아래쪽으로 갈 수 없습니다!')

  elif 방향 == "그만":
    break
  
  print(y,x)

  lists[y][x] = 1

  print_doublelist(lists)

# 테두리에 닿았다면?
# 함수 선언하기

def check(방향, y ,x):

  # 현재 좌표가 테두리를 벗어난다면
  if x < 0 or x >= 5 or y <0 or y >=5 :
    if 방향 == "왼쪽":
      x = 0
    elif 방향 == "오른쪽":
      x = 4
    elif 방향 == "위쪽":
      y = 0
    elif 방향 == "아래쪽":
      y = 4

    print('더이상',방향,'쪽으로 갈 수 없습니다!')

  return y,x

x = 2
y = 2

while True:
  
  
  방향 = input("방향을 입력하세요. (그만하고 싶으면 \"그만\"이라고 작성하세요.) ")

  lists[y][x] = 0

  # 왼쪽으로 1칸 간다면?  - (2,2)에서 (2,1)로 이동
  if 방향 == "왼쪽" :
    x = x - 1
    y,x = check(방향,y,x)
   

  # 오른쪽으로 1칸 간다면?  - (2,2)에서 (2,3)로 이동
  elif 방향 == "오른쪽":
    x = x + 1
    y,x = check(방향,y,x)

  # 위로 1칸 간다면?  - (2,2)에서 (1,2)로 이동
  elif 방향 == "위쪽":
    y = y - 1
    y,x = check(방향,y,x)

  # 아래로 1칸 간다면?  - (2,2)에서 (3,2)로 이동
  elif 방향 == "아래쪽":
    y = y + 1
    y,x = check(방향,y,x)

  elif 방향 == "그만":
    break
  
  print(y,x)

  lists[y][x] = 1

  print_doublelist(lists)

